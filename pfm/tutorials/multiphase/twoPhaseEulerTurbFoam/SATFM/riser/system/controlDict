/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
application     twoPhaseEulerTurbFoam;

startFrom       latestTime;

//startTime       0;

stopAt          endTime;

endTime         100;

deltaT          0.0005;

writeControl    adjustableRunTime;

writeInterval   1.0;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable on;

adjustTimeStep  yes;

maxCo           2.0;

maxDeltaT       1e-2;
minDeltaT	    1e-5; 

functions
{
    grad1 
    {  
         type   grad;
         functionObjectLibs ( "libfieldFunctionObjects.so" );
         field  p;
         result gradP;
         writeControl   writeTime;   
    } 
    c_mfp
    {
        functionObjectLibs ( "libutilityFunctionObjects.so" );
        type coded;
        enabled true;
  //      redirectType mfp;
	    name c_mfp;
        writeControl   writeTime;
        codeExecute
        #{
            const volScalarField& alpha = mesh().lookupObject<volScalarField>("alpha.particles");
            const volVectorField& U = mesh().lookupObject<volVectorField>("U.particles");
   	        static autoPtr<volScalarField> pField;

   if(!pField.valid())
   {
      pField.set
      (
         new volScalarField
         (
            IOobject
            (
               "mfp",
               mesh().time().timeName(),
               U.mesh(),
               IOobject::NO_READ,
               IOobject::AUTO_WRITE
            ),
            alpha*U.component(2)
         )
      );
   }

   volScalarField &mfp = pField();

   mfp.checkIn();

   mfp = alpha*U.component(2);

 
	    Info << "max(mfp)" << max(mag(mfp)) <<  endl;
        #};
    }



    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        writeControl   writeTime;
        fields
        (
            U.particles
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
		 window      10.0;
            }

            U.air
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
		 window      10.0;
            }

            alpha.particles
            {
                 mean        on;
                 prime2Mean  on;
                 base        time;
		 window      10.0;
            }
            p
            {
                 mean        on;
                 prime2Mean  on;
                 base        time;
		 window      10.0;
            }
            gradP
            {
                 mean        on;
                 prime2Mean  on;
                 base        time;
		 window      10.0;
            }
            mfp
            {
                 mean        on;
                 prime2Mean  on;
                 base        time;
		 window      10.0;
            }
            
        );
    }
}


// ************************************************************************* //
