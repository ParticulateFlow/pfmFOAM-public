/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pisoFoam;

startFrom       startTime;

startTime       181;

stopAt          endTime;

endTime         281;

deltaT          0.01;

writeControl    runTime;

writeInterval   1000;

purgeWrite      0;

writeFormat     ascii;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

// ************************************************************************* //

functions
{
    #include "monitorU"

    probes1
    {
        type probes;

        functionObjectLibs ("libsampling.so");

        #include "probesDict";
    }

    fieldAverage
    {
        type            fieldAverage;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         true;

        writeControl   runTime;
        writeInterval  100;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
        );
    }

    cuttingPlane
    {
        type            surfaces;
        libs            ("libsampling.so");
        writeControl    runTime;
        writeInterval   100;


        surfaceFormat   vtk;
        fields          (UMean);

        interpolationScheme cellPoint;

        surfaces
        (
            zNormal
            {
                type            cuttingPlane;
                planeType       pointAndNormal;
                pointAndNormalDict
                {
                    point   (0 0 0);
                    normal  (0 0 1);
                }
                interpolate     true;
            }
        );
    }
};
